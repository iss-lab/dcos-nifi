# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file={{MESOS_SANDBOX}}/{{NIFI_FLOWFILE_REPOSITORY_DIRECTORY}}/flow.xml.gz
nifi.flow.configuration.archive.enabled={{NIFI_CORE_FLOW_CONFIGURATION_ARCHIVE_ENABLED}}
nifi.flow.configuration.archive.dir={{MESOS_SANDBOX}}/{{NIFI_FLOWFILE_REPOSITORY_DIRECTORY}}/archive
nifi.flow.configuration.archive.max.time={{NIFI_CORE_FLOW_CONFIGURATION_ARCHIVE_MAX_TIME}}
nifi.flow.configuration.archive.max.storage={{NIFI_CORE_FLOW_CONFIGURATION_ARCHIVE_MAX_STORAGE}}
nifi.flow.configuration.archive.max.count={{NIFI_CORE_FLOW_CONFIGURATION_ARCHIVE_MAX_COUNT}}
nifi.flowcontroller.autoResumeState={{NIFI_CORE_FLOWCONTROLLER_AUTORESUMESTATE}}
nifi.flowcontroller.graceful.shutdown.period={{NIFI_CORE_FLOWCONTROLLER_GRACEFUL_SHUTDOWN_PERIOD}}
nifi.flowservice.writedelay.interval={{NIFI_CORE_FLOWSERVICE_WRITEDELAY_INTERVAL}}
nifi.administrative.yield.duration=30 secs
# If a component has no work to do (is "bored"), how long should we wait before checking again for work?
nifi.bored.yield.duration={{NIFI_CORE_BORED_YIELD_DURATION}}
nifi.queue.backpressure.count={{NIFI_CORE_QUEUE_BACKPRESSURE_COUNT}}
nifi.queue.backpressure.size={{NIFI_CORE_QUEUE_BACKPRESSURE_SIZE}}


nifi.authorizer.configuration.file=./conf/authorizers.xml
nifi.login.identity.provider.configuration.file=./conf/login-identity-providers.xml
nifi.templates.directory=./conf/templates
nifi.ui.banner.text={{NIFI_CORE_UI_BANNER_TEXT}}
nifi.ui.autorefresh.interval={{NIFI_CORE_UI_AUTOREFRESH_INTERVAL}}
nifi.nar.library.directory=./lib
{{#NIFI_CORE_ADDITIONAL_NAR_LIBRARY_PRESENT}}
nifi.nar.library.directory.lib1=nars/lib1
{{/NIFI_CORE_ADDITIONAL_NAR_LIBRARY_PRESENT}}
nifi.nar.library.autoload.directory=./extensions
nifi.nar.working.directory=./work/nar
nifi.documentation.working.directory=./work/docs/components

nifi.processor.scheduling.timeout={{NIFI_CORE_PROCESSOR_SCHEDULING_TIMEOUT}}


# State Management #
####################
nifi.state.management.configuration.file=./conf/state-management.xml
# The ID of the local state provider
nifi.state.management.provider.local=local-provider
# The ID of the cluster-wide state provider. This will be ignored if NiFi is not clustered but must be populated if running in a cluster.
nifi.state.management.provider.cluster=zk-provider
# Specifies whether or not this instance of NiFi should run an embedded ZooKeeper server
nifi.state.management.embedded.zookeeper.start=false
# Properties file that provides the ZooKeeper properties to use if <nifi.state.management.embedded.zookeeper.start> is set to true
nifi.state.management.embedded.zookeeper.properties=./conf/zookeeper.properties


# H2 Settings
nifi.database.directory={{MESOS_SANDBOX}}/{{NIFI_DATABASE_REPOSITORY_DIRECTORY}}
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.implementation=org.apache.nifi.controller.repository.WriteAheadFlowFileRepository
nifi.flowfile.repository.wal.implementation=org.apache.nifi.wali.SequentialAccessWriteAheadLog
nifi.flowfile.repository.directory={{MESOS_SANDBOX}}/{{NIFI_FLOWFILE_REPOSITORY_DIRECTORY}}
nifi.flowfile.repository.partitions={{NIFI_FLOWFILE_REPOSITORY_PARTITIONS}}
nifi.flowfile.repository.checkpoint.interval={{NIFI_FLOWFILE_REPOSITORY_CHECKPOINT_INTERVAL}}
nifi.flowfile.repository.always.sync={{NIFI_FLOWFILE_REPOSITORY_ALWAYS_SYNC}}

# Swap Management Properties
nifi.swap.manager.implementation=org.apache.nifi.controller.FileSystemSwapManager
nifi.queue.swap.threshold={{NIFI_QUEUE_SWAP_THRESHOLD}}
nifi.swap.in.period={{NIFI_SWAP_IN_PERIOD}}
nifi.swap.in.threads={{NIFI_SWAP_IN_THREADS}}
nifi.swap.out.period={{NIFI_SWAP_OUT_PERIOD}}
nifi.swap.out.threads={{NIFI_SWAP_OUT_THREADS}}

# Content Repository Properties
nifi.content.repository.implementation=org.apache.nifi.controller.repository.FileSystemRepository

# File System Content Repository Properties
nifi.content.claim.max.appendable.size={{NIFI_CONTENT_CLAIM_MAX_APPENDABLE_SIZE}}
nifi.content.claim.max.flow.files={{NIFI_CONTENT_CLAIM_MAX_FLOW_FILES}}
nifi.content.repository.directory.default={{MESOS_SANDBOX}}/{{NIFI_CONTENT_REPOSITORY_DIRECTORY}}
nifi.content.repository.archive.max.retention.period={{NIFI_CONTENT_REPOSITORY_ARCHIVE_MAX_RETENTION_PERIOD}}
nifi.content.repository.archive.max.usage.percentage={{NIFI_CONTENT_REPOSITORY_ARCHIVE_MAX_USAGE_PERCENTAGE}}
nifi.content.repository.archive.enabled={{NIFI_CONTENT_REPOSITORY_ARCHIVE_ENABLED}}
nifi.content.repository.always.sync={{NIFI_CONTENT_REPOSITORY_ALWAYS_SYNC}}
nifi.content.viewer.url={{NIFI_CONTENT_VIEWER_URL}}

#Volatile Content Repository Properties
nifi.volatile.content.repository.max.size={{NIFI_VOLATILE_CONTENT_REPOSITORY_MAX_SIZE}}
nifi.volatile.content.repository.block.size={{NIFI_VOLATILE_CONTENT_REPOSITORY_BLOCK_SIZE}}

# Provenance Repository Properties
nifi.provenance.repository.implementation=org.apache.nifi.provenance.PersistentProvenanceRepository
nifi.provenance.repository.debug.frequency=1_000_000
nifi.provenance.repository.encryption.key.provider.implementation=
nifi.provenance.repository.encryption.key.provider.location=
nifi.provenance.repository.encryption.key.id=
nifi.provenance.repository.encryption.key=

# Persistent Provenance Repository Properties
nifi.provenance.repository.directory.default={{MESOS_SANDBOX}}/{{NIFI_PROVENANCE_REPOSITORY_DIRECTORY}}
nifi.provenance.repository.max.storage.time={{NIFI_PROVENANCE_REPOSITORY_MAX_STORAGE_TIME}}
nifi.provenance.repository.max.storage.size={{NIFI_PROVENANCE_REPOSITORY_MAX_STORAGE_SIZE}}
nifi.provenance.repository.rollover.time={{NIFI_PROVENANCE_REPOSITORY_ROLLOVER_TIME}}
nifi.provenance.repository.rollover.size={{NIFI_PROVENANCE_REPOSITORY_ROLLOVER_SIZE}}
nifi.provenance.repository.query.threads={{NIFI_PROVENANCE_REPOSITORY_QUERY_THREADS}}
nifi.provenance.repository.index.threads={{NIFI_PROVENANCE_REPOSITORY_INDEX_THREADS}}
nifi.provenance.repository.compress.on.rollover={{NIFI_PROVENANCE_REPOSITORY_COMPRESS_ON_ROLLOVER}}
nifi.provenance.repository.always.sync={{NIFI_PROVENANCE_REPOSITORY_ALWAYS_SYNC}}
nifi.provenance.repository.journal.count={{NIFI_PROVENANCE_REPOSITORY_JOURNAL_COUNT}}
nifi.provenance.repository.indexed.fields={{NIFI_PROVENANCE_REPOSITORY_INDEXED_FIELDS}}
nifi.provenance.repository.indexed.attributes={{NIFI_PROVENANCE_REPOSITORY_INDEXED_ATTRIBUTES}}
nifi.provenance.repository.index.shard.size={{NIFI_PROVENANCE_REPOSITORY_INDEX_SHARD_SIZE}}
nifi.provenance.repository.max.attribute.length={{NIFI_PROVENANCE_REPOSITORY_MAX_ATTRIBUTE_LENGTH}}

# Volatile Provenance Respository Properties
nifi.provenance.repository.buffer.size={{NIFI_PROVENANCE_REPOSITORY_BUFFER_SIZE}}

# Write Ahead Provenance Repository Properties
# (In addition to Persistent Provenance Repository Properties)
nifi.provenance.repository.concurrent.merge.threads={{NIFI_PROVENANCE_REPOSITORY_CONCURRENT_MERGE_THREADS}}
nifi.provenance.repository.warm.cache.frequency={{NIFI_PROVENANCE_REPOSITORY_WARM_CACHE_FREQUENCY}}

# Encrypted Write Ahead Provenance Repository Properties
nifi.provenance.repository.debug.frequency={{NIFI_PROVENANCE_REPOSITORY_DEBUG_FREQUENCY}}
nifi.provenance.repository.encryption.key.provider.implementation={{NIFI_PROVENANCE_REPOSITORY_ENCRYPTION_KEY_PROVIDER_IMPLEMENTATION}}
nifi.provenance.repository.encryption.key.provider.location={{NIFI_PROVENANCE_REPOSITORY_ENCRYPTION_KEY_PROVIDER_LOCATION}}
nifi.provenance.repository.encryption.key.id={{NIFI_PROVENANCE_REPOSITORY_ENCRYPTION_KEY_ID}}
nifi.provenance.repository.encryption.key={{NIFI_PROVENANCE_REPOSITORY_ENCRYPTION_KEY}}

# Component Status Repository
nifi.components.status.repository.implementation=org.apache.nifi.controller.status.history.VolatileComponentStatusRepository
nifi.components.status.repository.buffer.size={{NIFI_COMPONENTS_STATUS_REPOSITORY_BUFFER_SIZE}}
nifi.components.status.snapshot.frequency={{NIFI_COMPONENTS_STATUS_SNAPSHOT_FREQUENCY}}

# Site to Site properties
nifi.remote.input.host={{TASK_NAME}}.{{FRAMEWORK_HOST}}
nifi.remote.input.secure={{NIFI_REMOTE_INPUT_SECURE}}
nifi.remote.input.socket.port={{NIFI_REMOTE_INPUT_SOCKET_PORT}}
nifi.remote.input.http.enabled={{NIFI_REMOTE_INPUT_HTTP_ENABLED}}
nifi.remote.input.http.transaction.ttl={{NIFI_REMOTE_INPUT_HTTP_TRANSACTION_TTL}}

# Web Properties
nifi.web.war.directory={{NIFI_WEB_WAR_DIRECTORY}}
{{^NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
nifi.web.http.host={{TASK_NAME}}.{{FRAMEWORK_HOST}}
nifi.web.http.port={{PORT_WEB}}
nifi.web.http.network.interface.default=
nifi.web.https.host=
nifi.web.https.port=
nifi.web.https.network.interface.default=
{{/NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
{{#NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
nifi.web.http.host=
nifi.web.http.port=
nifi.web.http.network.interface.default=
nifi.web.https.host={{TASK_NAME}}.{{FRAMEWORK_HOST}}
#nifi.web.https.host=0.0.0.0
nifi.web.https.port={{PORT_WEB}}
nifi.web.https.network.interface.default=
{{/NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
nifi.web.jetty.working.directory={{NIFI_WEB_JETTY_WORKING_DIRECTORY}}
nifi.web.jetty.threads={{NIFI_WEB_JETTY_THREADS}}
nifi.web.max.header.size={{NIFI_WEB_MAX_HEADER_SIZE}}
nifi.web.proxy.context.path={{NIFI_WEB_PROXY_CONTEXT_PATH}}
nifi.web.proxy.host={{NIFI_WEB_PROXY_HOST}}

# Security Properties
{{#NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
nifi.sensitive.props.key={{NIFI_SENSITIVE_PROPS_KEY}}
nifi.sensitive.props.key.protected={{NIFI_SENSITIVE_PROPS_KEY_PROTECTED}}
nifi.sensitive.props.algorithm={{NIFI_SENSITIVE_PROPS_ALGORITHM}}
nifi.sensitive.props.provider={{NIFI_SENSITIVE_PROPS_PROVIDER}}
nifi.sensitive.props.additional.keys={{NIFI_SENSITIVE_PROPS_ADDITIONAL_KEYS}}

nifi.security.keystore={{MESOS_SANDBOX}}/node.keystore
nifi.security.keystoreType=jks
nifi.security.keystorePasswd=notsecure
nifi.security.keyPasswd=notsecure
nifi.security.truststore={{MESOS_SANDBOX}}/node.truststore
nifi.security.truststoreType=jks
nifi.security.truststorePasswd=notsecure
nifi.security.needClientAuth=true

nifi.security.user.authorizer=managed-authorizer
{{#SECURITY_KERBEROS_ENABLED}}
nifi.security.user.login.identity.provider=kerberos-provider
{{/SECURITY_KERBEROS_ENABLED}}
{{^SECURITY_KERBEROS_ENABLED}}
nifi.security.user.login.identity.provider=
{{/SECURITY_KERBEROS_ENABLED}}
nifi.security.ocsp.responder.url={{NIFI_SECURITY_OCSP_RESPONDER_URL}}
nifi.security.ocsp.responder.certificate={{NIFI_SECURITY_OCSP_RESPONDER_CERTIFICATE}}
{{/NIFI_CLUSTER_PROTOCOL_IS_SECURE}}

{{^NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
nifi.sensitive.props.key={{NIFI_SENSITIVE_PROPS_KEY}}
nifi.sensitive.props.key.protected={{NIFI_SENSITIVE_PROPS_KEY_PROTECTED}}
nifi.sensitive.props.algorithm={{NIFI_SENSITIVE_PROPS_ALGORITHM}}
nifi.sensitive.props.provider={{NIFI_SENSITIVE_PROPS_PROVIDER}}
nifi.sensitive.props.additional.keys={{NIFI_SENSITIVE_PROPS_ADDITIONAL_KEYS}}

nifi.security.keystore=
nifi.security.keystoreType=
nifi.security.keystorePasswd=
nifi.security.keyPasswd=
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=

nifi.security.needClientAuth={{NIFI_SECURITY_NEEDCLIENTAUTH}}
nifi.security.user.authorizer={{NIFI_SECURITY_USER_AUTHORIZER}}
nifi.security.user.login.identity.provider={{NIFI_SECURITY_USER_LOGIN_IDENTITY_PROVIDER}}
nifi.security.ocsp.responder.url={{NIFI_SECURITY_OCSP_RESPONDER_URL}}
nifi.security.ocsp.responder.certificate={{NIFI_SECURITY_OCSP_RESPONDER_CERTIFICATE}}
{{/NIFI_CLUSTER_PROTOCOL_IS_SECURE}}

# Identity Mapping Properties
nifi.security.identity.mapping.pattern.dn=^CN=(.*?), OU=(.*?), O=(.*?), L=(.*?), ST=(.*?), C=(.*?)$
nifi.security.identity.mapping.value.dn=$1@$2
nifi.security.identity.mapping.transform.dn=NONE
nifi.security.identity.mapping.pattern.kerb=^(.*?)/instance@(.*?)$
nifi.security.identity.mapping.value.kerb=$1@$2
nifi.security.identity.mapping.transform.kerb=UPPER

# Group Mapping Properties
# These properties allow normalizing group names coming from external sources like LDAP. The following example lowercases any group name.

nifi.security.group.mapping.pattern.anygroup=^(.*)$
nifi.security.group.mapping.value.anygroup=$1
nifi.security.group.mapping.transform.anygroup=LOWER

# Cluster Common Properties
nifi.cluster.protocol.heartbeat.interval={{NIFI_CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL}}
{{^NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
nifi.cluster.protocol.is.secure=false
{{/NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
{{#NIFI_CLUSTER_PROTOCOL_IS_SECURE}}
nifi.cluster.protocol.is.secure=true
{{/NIFI_CLUSTER_PROTOCOL_IS_SECURE}}

# Cluster Node Properties
nifi.cluster.is.node={{NIFI_CLUSTER_IS_NODE}}
nifi.cluster.node.address={{TASK_NAME}}.{{FRAMEWORK_HOST}}
nifi.cluster.node.protocol.port={{NIFI_CLUSTER_NODE_PROTOCOL_PORT}}
nifi.cluster.node.protocol.threads={{NIFI_CLUSTER_NODE_PROTOCOL_THREADS}}
nifi.cluster.node.event.history.size={{NIFI_CLUSTER_NODE_EVENT_HISTORY_SIZE}}
nifi.cluster.node.connection.timeout={{NIFI_CLUSTER_NODE_CONNECTION_TIMEOUT}}
nifi.cluster.node.read.timeout={{NIFI_CLUSTER_NODE_READ_TIMEOUT}}
nifi.cluster.firewall.file={{NIFI_CLUSTER_FIREWALL_FILE}}
nifi.cluster.flow.election.max.wait.time={{NIFI_CLUSTER_FLOW_ELECTION_MAX_WAIT_TIME}}
nifi.cluster.flow.election.max.candidates=

# cluster load balancing properties
nifi.cluster.load.balance.host={{NIFI_CLUSTER_LOAD_BALANCE_HOST}}
nifi.cluster.load.balance.port={{NIFI_CLUSTER_LOAD_BALANCE_PORT}}
nifi.cluster.load.balance.connections.per.node={{NIFI_CLUSTER_LOAD_BALANCE_CONNECTIONS_PER_NODE}}
nifi.cluster.load.balance.max.thread.count={{NIFI_CLUSTER_LOAD_BALANCE_MAX_THREAD_COUNT}}
nifi.cluster.load.balance.comms.timeout={{NIFI_CLUSTER_LOAD_BALANCE_COMMS_TIMEOUT}}

# Zookeeper Properties
nifi.zookeeper.connect.string={{NIFI_ZOOKEEPER_CONNECT_STRING}}
nifi.zookeeper.connect.timeout={{NIFI_ZOOKEEPER_CONNECT_TIMEOUT}}
nifi.zookeeper.session.timeout={{NIFI_ZOOKEEPER_SESSION_TIMEOUT}}
nifi.zookeeper.root.node=/nifi{{FRAMEWORK_NAME}}

# Kerberos Properties
nifi.kerberos.krb5.file={{MESOS_SANDBOX}}/nifi-{{NIFI_VERSION}}/conf/krb5.conf
nifi.kerberos.service.principal={{NIFI_KERBEROS_SERVICE_PRINCIPAL}}
nifi.kerberos.service.keytab.location=node.keytab

nifi.kerberos.spnego.principal=
nifi.kerberos.spnego.keytab.location=
nifi.kerberos.spnego.authentication.expiration=12 hours

# Custom Properties
nifi.variable.registry.properties={{NIFI_VARIABLE_REGISTRY_PROPERTIES}}
